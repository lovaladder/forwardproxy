// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/main.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dashboard_UserStramingUpdate_FullMethodName  = "/grpc.main.Dashboard/UserStramingUpdate"
	Dashboard_UsageStramingUpdate_FullMethodName = "/grpc.main.Dashboard/UsageStramingUpdate"
)

// DashboardClient is the client API for Dashboard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashboardClient interface {
	UserStramingUpdate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Dashboard_UserStramingUpdateClient, error)
	UsageStramingUpdate(ctx context.Context, in *RepeatedUsage, opts ...grpc.CallOption) (*Empty, error)
}

type dashboardClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardClient(cc grpc.ClientConnInterface) DashboardClient {
	return &dashboardClient{cc}
}

func (c *dashboardClient) UserStramingUpdate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Dashboard_UserStramingUpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Dashboard_ServiceDesc.Streams[0], Dashboard_UserStramingUpdate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &dashboardUserStramingUpdateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dashboard_UserStramingUpdateClient interface {
	Recv() (*RepeatedUser, error)
	grpc.ClientStream
}

type dashboardUserStramingUpdateClient struct {
	grpc.ClientStream
}

func (x *dashboardUserStramingUpdateClient) Recv() (*RepeatedUser, error) {
	m := new(RepeatedUser)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dashboardClient) UsageStramingUpdate(ctx context.Context, in *RepeatedUsage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Dashboard_UsageStramingUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardServer is the server API for Dashboard service.
// All implementations must embed UnimplementedDashboardServer
// for forward compatibility
type DashboardServer interface {
	UserStramingUpdate(*Empty, Dashboard_UserStramingUpdateServer) error
	UsageStramingUpdate(context.Context, *RepeatedUsage) (*Empty, error)
	mustEmbedUnimplementedDashboardServer()
}

// UnimplementedDashboardServer must be embedded to have forward compatible implementations.
type UnimplementedDashboardServer struct {
}

func (UnimplementedDashboardServer) UserStramingUpdate(*Empty, Dashboard_UserStramingUpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method UserStramingUpdate not implemented")
}
func (UnimplementedDashboardServer) UsageStramingUpdate(context.Context, *RepeatedUsage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsageStramingUpdate not implemented")
}
func (UnimplementedDashboardServer) mustEmbedUnimplementedDashboardServer() {}

// UnsafeDashboardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardServer will
// result in compilation errors.
type UnsafeDashboardServer interface {
	mustEmbedUnimplementedDashboardServer()
}

func RegisterDashboardServer(s grpc.ServiceRegistrar, srv DashboardServer) {
	s.RegisterService(&Dashboard_ServiceDesc, srv)
}

func _Dashboard_UserStramingUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DashboardServer).UserStramingUpdate(m, &dashboardUserStramingUpdateServer{stream})
}

type Dashboard_UserStramingUpdateServer interface {
	Send(*RepeatedUser) error
	grpc.ServerStream
}

type dashboardUserStramingUpdateServer struct {
	grpc.ServerStream
}

func (x *dashboardUserStramingUpdateServer) Send(m *RepeatedUser) error {
	return x.ServerStream.SendMsg(m)
}

func _Dashboard_UsageStramingUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepeatedUsage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).UsageStramingUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_UsageStramingUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).UsageStramingUpdate(ctx, req.(*RepeatedUsage))
	}
	return interceptor(ctx, in, info, handler)
}

// Dashboard_ServiceDesc is the grpc.ServiceDesc for Dashboard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dashboard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.main.Dashboard",
	HandlerType: (*DashboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UsageStramingUpdate",
			Handler:    _Dashboard_UsageStramingUpdate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UserStramingUpdate",
			Handler:       _Dashboard_UserStramingUpdate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/main.proto",
}
